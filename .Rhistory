git status
library(cowplot)
install.packages(cowplot)
install.packages("magick")
library(cowplot)
# Combine multiple images
plot_grid(
draw_image("media/moss.JPG"),
draw_image("media/moss.JPG"),
draw_image("media/moss.JPG"),
draw_image("media/moss.JPG"),
ncol = 3
)
<div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px;">
# List all images in the folder
images <- list.files("media/", pattern = "\\.jpg$", full.names = TRUE)
# Generate the Markdown grid
cat('<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">')
for (img in images) {
cat(paste0(
'<figure style="text-align: center;">',
'<img src="', img, '" alt="', basename(img), '" style="width: 100%; border-radius: 5px;">',
'<figcaption>', basename(img), '</figcaption>',
'</figure>'
))
}
cat('</div>')
git status
quarto preview
quarto render
---
#title: "The Lens Narrative"
toc: false
#| output: asis
#| message: false
img_files <- fs::dir_ls("photography", glob="*.JPG") %>%
sort()
#| output: asis
#| message: false
img_files <- fs::dir_ls("photography", glob="*.JPG") %<%
sort()
#| output: asis
#| message: false
img_files <- fs::dir_ls("photography", glob="*.JPG") %>%
sort()
#| output: asis
#| message: false
img_files <- sort(fs::dir_ls("photography", glob="*.JPG"))
quarto preview
---
title: "Principal Components Analysis (PCA) on Soil Characteristics"
---
title: "Principal Components Analysis (PCA) on Soil Characteristics"
# Load the dataset
df <- read_csv(here("posts","2025-02-18-plant-classifier","data", "palmetto.csv"))
# Import libraries
library(tidyverse)
library(tidymodels)
library(here)
library(cowplot)
library(patchwork)
library(dplyr)
library(lubridate)
library(ggplot2)
library(kableExtra)
library(stats)
library(yardstick)
# Load the dataset
df <- read_csv(here("posts","2025-02-18-plant-classifier","data", "palmetto.csv"))
# Preprocess data
df_clean <- df %>%
select(species, height, length, width, green_lvs) %>%
drop_na() %>%
mutate(species = factor(species, levels = c('1','2'), labels = c(0, 1)))
kable(head(df_clean), title = "Palmetto Data cleaned")
# Import data
fish_df <- read_csv(here("posts","2025-04-12-fishladder",'data', 'willamette_fish_passage.csv')) %>%
#replace(is.na(.),0) %>%
janitor::clean_names()
# Import data
fish_df <- read_csv(here("posts","2025-04-12-fishladder",'data', 'willamette_fish_passage.csv')) %>%
#replace(is.na(.),0) %>%
janitor::clean_names()
library(tidyverse)
library(here)
library(lubridate)
library(tsibble)
library(feasts)
library(fable)
library(kableExtra)
library(patchwork)
library(skimr)
# Import data
fish_df <- read_csv(here("posts","2025-04-12-fishladder",'data', 'willamette_fish_passage.csv')) %>%
#replace(is.na(.),0) %>%
janitor::clean_names()
2
# Convert to ts
fish_ts <- fish_df %>%
mutate(date = mdy(date)) %>%
as_tsibble(key = NULL,
index = date) %>%
replace(is.na(.), 0)
library(tidyverse)
library(here)
library(lubridate)
library(tsibble) # new lib!
library(feasts)
library(fable)
energy_df <- read_csv(here("posts", "2025-03-13-energy", "data", "energy.csv"))
library(tidyverse)
library(here)
library(lubridate)
library(tsibble) # new lib!
library(feasts)
library(fable)
energy_df <- read_csv(here("posts", "2025-03-13-energy", "data", "energy.csv"))
library(tidyverse)
library(here)
library(lubridate)
library(tsibble)
library(feasts)
library(fable)
energy_df <- read_csv(here("posts", "2025-03-13-energy", "data", "energy.csv"))
energy_ts <- energy_df %>%
mutate(date = yearmonth(yrmonth)) %>%
as_tsibble(index = date,
key = sector)
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
thememinimal() +
scale_color_manual(values = c("Residential" = "#964B00", "Commercial" = "salmon", "Industrial" = "#3357FF")) +
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
thememinimal() +
scale_color_manual(values = c("Residential" = "#964B00", "Commercial" = "salmon", "Industrial" = "#3357FF"))
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("Residential" = "#964B00", "Commercial" = "salmon", "Industrial" = "#3357FF"))
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("Residential" = "#964B00", "Commercial" = "salmon", "Industrial" = "#3357FF"))
unique(energy_ts$sector)
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("residential" = "#964B00", "commercial" = "salmon", "industrial" = "#3357FF"))
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("residential" = "#964B00", "commercial" = "salmon", "industrial" = "lightblue"))
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("residential" = "salmon", "commercial" = "#964B00", "industrial" = "lightblue"))
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("residential" = "lightblue", "commercial" = "#964B00", "industrial" = "salmon"))
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal()
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("residential" = "lightblue", "commercial" = "salmon", "industrial" = "#964B00"))
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(title = "Energy Consumption Trend", y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("residential" = "lightblue", "commercial" = "salmon", "industrial" = "#964B00"))
energy_ts %>%
filter(sector == 'residential') %>%
gg_season(y = energy_total, pal = hcl.colors(n = 9)) +
theme_minimal() +
labs(x = "month",
y = "residential energy consumption (trillion BTU)")
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line() +
labs(title = "Energy Consumption Trend", y = "Energy consumption by sector \n (Trillion BTU)")+
theme_minimal() +
scale_color_manual(values = c("residential" = "lightblue", "commercial" = "salmon", "industrial" = "lightgreen"))
# Find STL decomposition
dcmp <- energy_ts %>%
filter(sector == 'residential') %>%
model(feasts::STL(energy_total ~ season(period = '1 year') + trend(window = 25)))
# Visualize the decomposed components
components(dcmp) %>%
autoplot() +
theme_minimal()
# Find STL decomposition
dcmp <- energy_ts %>%
filter(sector == 'residential') %>%
model(feasts::STL(energy_total ~ season(period = '1 year') + trend(window = 25)))
# Visualize the decomposed components
components(dcmp) %>%
autoplot() +
theme_minimal()
energy_ts %>%
filter(sector == 'residential') %>%
ACF(energy_total) %>%
autoplot()
energy_fit <- energy_ts %>%
filter(sector == 'residential') %>%
group_by_key(sector) %>%
model(ets = ETS(energy_total ~ season(method = "M") + trend(method = "A")))
energy_forecast <- energy_fit %>%
forecast(h = "5 years")
energy_fit <- energy_ts %>%
filter(sector == 'residential') %>%
group_by_key(sector) %>%
model(ets = ETS(energy_total ~ season(method = "M") + trend(method = "A")))
energy_forecast <- energy_fit %>%
forecast(h = "5 years")
# plot it added to the original data:
energy_forecast %>%
autoplot(energy_ts)
energy_predicted <- broom::augment(energy_fit)
ggplot(data = energy_predicted) +
geom_line(aes(x = date, y = energy_total)) +
geom_line(aes(x = date, y = .fitted), color = "red", alpha = .7)
energy_predicted <- broom::augment(energy_fit)
ggplot(data = energy_predicted) +
geom_line(aes(x = date, y = energy_total), color = "brown") +
geom_line(aes(x = date, y = .fitted), color = "red", alpha = .7)
energy_predicted <- broom::augment(energy_fit)
ggplot(data = energy_predicted) +
geom_line(aes(x = date, y = energy_total), color = "blue") +
geom_line(aes(x = date, y = .fitted), color = "red", alpha = .7)
energy_predicted <- broom::augment(energy_fit)
# Create a more presentable comparison of actual vs. predicted energy consumption
ggplot(data = energy_predicted) +
geom_line(aes(x = date, y = energy_total, color = "Actual Consumption"), linewidth = 0.8) +
geom_line(aes(x = date, y = .fitted, color = "Model Prediction"), linewidth = 0.8) +
labs(
title = "U.S. Residential Energy Consumption: Actual vs. Predicted",
subtitle = "Comparing observed data with ETS model predictions (1973-2023)",
x = "Year",
y = "Energy Consumption (Trillion BTU)",
color = "Data Type"
) +
scale_color_manual(values = c("Actual Consumption" = "#2E86C1", "Model Prediction" = "#E74C3C")) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 10, color = "gray30"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.minor = element_line(color = "gray90"),
panel.grid.major = element_line(color = "gray80"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 9)
)
energy_predicted <- broom::augment(energy_fit)
# Create a more presentable comparison of actual vs. predicted energy consumption
ggplot(data = energy_predicted) +
geom_line(aes(x = date, y = energy_total, color = "Actual Consumption"), linewidth = 0.8) +
geom_line(aes(x = date, y = .fitted, color = "Model Prediction"), linewidth = 0.8) +
labs(
title = "U.S. Residential Energy Consumption: Actual vs. Predicted",
subtitle = "Comparing observed data with ETS model predictions (1973-2023)",
x = "Year",
y = "Energy Consumption (Trillion BTU)",
color = "Data Type"
) +
scale_color_manual(values = c("Actual Consumption" = "#2E86C1", "Model Prediction" = "darkorange")) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 10, color = "gray30"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.minor = element_line(color = "gray90"),
panel.grid.major = element_line(color = "gray80"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 9)
)
ggplot(data = energy_predicted, aes(x = .resid)) +
geom_histogram(fill = "#4682B4", color = "white", bins = 30) +
labs(
title = "Distribution of Model Residuals",
subtitle = "Assessing model performance through residual analysis",
x = "Residual Value (Actual - Predicted)",
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(color = "gray30")
) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red")
# Create a more presentable energy consumption trend visualization
ggplot(data = energy_ts, aes(x = date, y = energy_total, color = sector)) +
geom_line(linewidth = 0.9) +
labs(
title = "U.S. Energy Consumption by Sector (1973-2023)",
subtitle = "Monthly data from the U.S. Energy Information Administration",
x = "Year",
y = "Energy Consumption (Trillion BTU)",
color = "Sector"
) +
theme_minimal() +
scale_color_manual(
values = c("residential" = "#3498DB", "commercial" = "#E74C3C", "industrial" = "#2ECC71"),
labels = c("Residential", "Commercial", "Industrial")
) +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12, color = "gray40"),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.minor = element_line(color = "gray95"),
panel.grid.major = element_line(color = "gray90"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
) +
guides(color = guide_legend(override.aes = list(linewidth = 2)))
```{r}
energy_ts %>% gg_subseries(energy_total)
# Create a more presentable seasonal plot for residential energy consumption
energy_ts %>%
filter(sector == 'residential') %>%
gg_season(y = energy_total, pal = hcl.colors(n = 10, palette = "viridis")) +
theme_minimal() +
labs(
title = "Seasonal Patterns in U.S. Residential Energy Consumption",
subtitle = "Monthly patterns shown across different years (1973-2023)",
x = "Month",
y = "Energy Consumption (Trillion BTU)",
color = "Year"
) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12, color = "gray40"),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0),
legend.position = "right",
legend.title = element_text(face = "bold"),
panel.grid.minor = element_line(color = "gray95"),
panel.grid.major = element_line(color = "gray90"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
) +
scale_x_discrete(
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
) +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
library(tidyverse)
library(here)
library(lubridate)
library(tsibble)
library(feasts)
library(fable)
library(ggplot2)
energy_df <- read_csv(here("posts", "2025-03-13-energy", "data", "energy.csv"))
energy_ts <- energy_df %>%
mutate(date = yearmonth(yrmonth)) %>%
as_tsibble(index = date,
key = sector)
